@page "/Sudoku"
@inject IJSRuntime JSRuntime;

@if (!ran) {
    <h1>Constraint Satisfaction Problem</h1><br/>
}
else {
    <h1>Constraint Satisfaction Problem - @backtracks backtracks</h1><br/>
}

<div class="row">
    <div class="displayCol">
        <div id="table"></div>
    </div>
    <div class="optionsCol">
        <h5>Step Speed: @stepSpeed</h5>
        <div class="slidecontainer">
            <input type="range" min="1" max="1000" class="slider" id="myRange" @bind="stepSpeed" @bind:event="oninput">
        </div>
        <h5>Difficulty: @difficulty</h5>
        <div class="slidecontainer">
            <input type="range" min="1" max="3" class="slider" id="myRange" @bind="difficulty" @bind:event="oninput">
        </div>
        <br />
        <button type="button" disabled=@running @onclick="switchSteps">Turn On/Off Updates</button>
        <button type="button" disabled=@ran @onclick="runCSP">Run</button>
        <button type="button" disabled=@running @onclick="resetBoard">Reset</button>
    </div>
</div>


@code {
    private SudokuBoard board;
    private bool updatesOn;
    private int difficulty;
    private int backtracks;
    private int stepSpeed;
    private bool running;
    private bool ran;

    protected override void OnInitialized()
    {
        updatesOn = false;
        difficulty = 2;
        backtracks = 0;
        stepSpeed = 1;
        ran = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("drawSudokuBoard");
            board = new SudokuBoard(Enum.GetValues(typeof(SudokuBoard.difficulty)).Cast<SudokuBoard.difficulty>().ToList()[difficulty]);
            await JSRuntime.InvokeVoidAsync("updateSudokuBoard", board.board);
        }
    }

    private void switchSteps()
    {
        updatesOn = !updatesOn;
    }

    private async Task resetBoard()
    {
        board = new SudokuBoard(Enum.GetValues(typeof(SudokuBoard.difficulty)).Cast<SudokuBoard.difficulty>().ToList()[difficulty]);
        await JSRuntime.InvokeVoidAsync("updateSudokuBoard", board.board);
        ran = false;
    }

    private async Task runCSP()
    {
        running = true;
        ran = true;
        IEnumerable<CSP.CSPResult> solutionSteps = CSP.run(board);

        if (updatesOn)
        {
            foreach (var step in solutionSteps)
            {
                await JSRuntime.InvokeVoidAsync("updateSudokuBoard", step.board.board);
                backtracks = step.attempts;
                this.StateHasChanged();
                await Task.Delay(stepSpeed);
            }
        }
        else
        {
            var solution = solutionSteps.ToList()[^1];
            backtracks = solution.attempts;
            await JSRuntime.InvokeVoidAsync("updateSudokuBoard", solution.board.board);
            this.StateHasChanged();
        }

        running = false;
        this.StateHasChanged();
    }
}
