@page "/testlib"
@inject IJSRuntime JSRuntime;
@inject IGeocodeService geocodeService;

@if (dist == 0) {
    <h1>Test Graph Library</h1><br/>
}
else {
    <h1>Test Graph Library - @dist kilometers - Temp: @temp</h1><br/>
}

<div class="row">
  <div class="column">
    <div class="mb-4">
        <input type="text" placeholder="Enter address or city" class="form-control" @bind="@address" />
        <div style="display:flex;justify-content:space-around;" class="mt-1">
        <button type="button" class="btn btn-primary mr-2" @onclick="HandleValidPos">Add</button>
        <button type="button" class="btn btn-primary mr-2" @onclick="ClearPoses" disabled=@invalid>Clear</button>
        <button type="button" class="btn btn-primary mr-2" @onclick="runSimAnnealing" disabled=@invalid>Calculate Path</button>
        </div>
    </div>

    <svg id='globe'></svg>
  </div>
  <div class="column" id="c2">
      <h5>Locations entered: </h5>
      @if (poses.Count == 0) {
        <p id="locations" style="white-space: pre-wrap">None so far</p>
      } else {
          <ul>
            @foreach (var pose in poses) {
                <li key=@pose.ID>
                    @pose.name: @pose.lat, @pose.lon - 
                    <button class="btn btn-danger" @onclick="() => HandleRemovePos(pose.ID)">X</button>
                </li>
            }
          </ul>
      }
  </div>
</div>

@code {
    private List<Position> poses;
    private List<Link> links;
    private Random rand;
    private string address;
    private bool invalid;
    private double temp;
    private int dist;
    
    protected override async Task OnInitializedAsync()
    {
        poses = new List<Position>();
        links = new List<Link>();
        rand = new Random();
        address = "";
        invalid = true;
        temp = 0.0;
        dist = 0;
        await JSRuntime.InvokeVoidAsync("setRendered", false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await DisplayGlobe();
        }
    }

    private async Task DisplayGlobe()
    {
        await JSRuntime.InvokeVoidAsync("createGlobe", poses, links);
    }

    private async Task HandleValidPos()
    {
        var position = await geocodeService.GetPos(address);
        address = "";
        if (position != null)
        {
            poses.Add(position);
            if (poses.Count > 2)
            {
                invalid = false;
                this.StateHasChanged();
            }
            await DisplayGlobe();
        }
    }

    private async Task HandleRemovePos(int id)
    {
        poses = poses.Where(pose => pose.ID != id).ToList();
        links.Clear();

        if (poses.Count < 3)
        {
            invalid = true;
            this.StateHasChanged();
        }

        await DisplayGlobe();
    }

    private async Task ClearPoses()
    {
        poses.Clear();
        links.Clear();
        await DisplayGlobe();
    }

    private async Task runSimAnnealing()
    {
        invalid = true;
        var graph = new WeightedGraph(poses);
        var solutionSteps = SimAnnealingGraph.Run(graph, 500*poses.Count, 0.999, 0.001);
        foreach (var step in solutionSteps)
        {
            dist = (int)step.state.distance;
            links = step.state.links;
            temp = Math.Round(step.temp, 2);
            this.StateHasChanged();
            await DisplayGlobe();
            await Task.Delay(50);
        }
        invalid = false;
        this.StateHasChanged();
    }
}
