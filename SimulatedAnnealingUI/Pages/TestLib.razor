@page "/testlib"
@inject IJSRuntime JSRuntime;
<h1>Test Graph Library</h1><br/>

<div class="row">
  <div class="column">
        <EditForm Model="@position" OnValidSubmit="HandleValidPos">
        <DataAnnotationsValidator />
        <ValidationSummary />
            <h5>Enter the Locations's Name: </h5>
            <InputText id="name" @bind-Value="position.name" /><br /><br />

            <h5>Enter the Locations's Latitude(South is Negative): </h5>
            <InputNumber id="latitude" @bind-Value="position.lat" /><br /><br />

            <h5>Enter the Locations's Longitude(West is Negative): </h5>
            <InputNumber id="longitude" @bind-Value="position.lon" /><br /><br />

            <button type="submit">Submit</button>
            <button type="button" @onclick="ClearPoses">Clear</button>
            <button type="button" @onclick="runSimAnnealing">Calculate Path</button>
        </EditForm><br />

        <svg id='globe'></svg>
  </div>
  <div class="column" id="c2">
      <h5>Locations entered: </h5>
      @if (poses.Count == 0) {
        <p id="locations" style="white-space: pre-wrap">None so far</p>
      } else {
          <ul>
            @foreach (var pose in poses) {
                <li key=@pose.ID>
                    @pose.name: @pose.lat, @pose.lon - 
                    <button class="btn btn-danger" @onclick="() => HandleRemovePos(pose.ID)">X</button>
                </li>
            }
          </ul>
      }
  </div>
</div>

@code {
    private List<Position> poses;
    private Position position;
    private List<Link> links;
    private bool rendered;
    private Random rand;
    
    protected override async Task OnInitializedAsync()
    {
        poses = new List<Position>();
        position = new Position();
        links = new List<Link>();
        rendered = false;
        rand = new Random();
        await JSRuntime.InvokeVoidAsync("setRendered", false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!rendered)
        {
            rendered = true;
            await DisplayGlobe();
        }
    }

    private async Task DisplayGlobe()
    {
        await JSRuntime.InvokeVoidAsync("createGlobe", poses, links);
    }

    private async Task HandleValidPos()
    {
        poses.Add(new Position(rand.Next(0, 100000), position.lat, position.lon, position.name));
        await DisplayGlobe();
    }

    private async Task HandleRemovePos(int id)
    {
        poses = poses.Where(pose => pose.ID != id).ToList();
        await DisplayGlobe();
    }

    private async Task ClearPoses()
    {
        poses.Clear();
        links.Clear();
        await DisplayGlobe();
    }

    private async Task runSimAnnealing()
    {
        WeightedGraph graph = new WeightedGraph(poses);
        IEnumerable<WeightedGraph> solutionSteps = SimAnnealingGraph.Run(graph, 1, 0.999, 0.01);
        foreach (var step in solutionSteps)
        {
            links = step.links;
            await DisplayGlobe();
            await Task.Delay(300);
        }
    }
}
