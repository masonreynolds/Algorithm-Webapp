@page "/NQueens"
@inject IJSRuntime JSRuntime;

@if (temp == 0)
{
    <h1 class="text">8-Queens</h1><br/>
}
else
{
    <h1 class="text">8-Queens - @heuristic Conflicts - Temp: @temp</h1><br/>
}

<div class="row">
    <div class="displayCol">
        <div id="table"></div>
    </div>
    <div class="optionsCol">
        <h5 class="text">Step Speed: @stepSpeed</h5>
        <div class="slidecontainer">
            <input type="range" min="1" max="1000" class="slider" id="myRange" @bind="stepSpeed" @bind:event="oninput">
        </div>
        <br />
        <h5 class="text">Max Temperature: @maxTemp</h5>
        <div class="slidecontainer">
            <input type="range" min="1" max="500" class="slider" id="myRange" @bind="maxTemp" @bind:event="oninput">
        </div>
        <br />
        <h5 class="text">Decrement per Step: @decrement</h5>
        <div class="slidecontainer">
            <input type="range" min="0.9" max="0.9999" step="0.0001" class="slider" id="myRange" @bind="decrement" @bind:event="oninput">
        </div>
        <br />
        <h5 class="text">Threshold: @threshold</h5>
        <div class="slidecontainer">
            <input type="range" min="1" max="@maxTemp" class="slider" id="myRange" @bind="threshold" @bind:event="oninput">
        </div>
        <br />
        <button type="button" class="btn btn-primary mr-2" disabled=@running @onclick="switchSteps">Turn On/Off Updates</button>
        <button type="button" class="btn btn-primary mr-2" @onclick="runSimAnnealing">Run</button>
    </div>
</div>


@code {
    private double threshold;
    private double decrement;
    private bool updatesOn;
    private int heuristic;
    private int boardSize;
    private bool running;
    public int stepSpeed;
    private double temp;
    private int maxTemp;

    protected override void OnInitialized()
    {
        updatesOn = false;
        decrement = 0.999;
        running = false;
        boardSize = 8;
        threshold = 1;
        stepSpeed = 1;
        maxTemp = 100;
        temp = 0;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("drawChessBoard", boardSize, 1);
        }
    }

    private void switchSteps()
    {
        updatesOn = !updatesOn;
    }

    private async Task runSimAnnealing()
    {
        running = true;
        IEnumerable<SimAnnealingNQueens.simBoard> solutionSteps = SimAnnealingNQueens.run(new BoardState(boardSize), maxTemp, decrement, threshold);

        if (updatesOn)
        {
            foreach (var step in solutionSteps)
            {
                await JSRuntime.InvokeVoidAsync("updateChess", step.board);
                heuristic = step.board.heuristic;
                temp = Math.Round(step.temp, 4);
                this.StateHasChanged();
                await Task.Delay(stepSpeed);
            }
        }
        else
        {
            var solution = solutionSteps.ToList()[^1];
            await JSRuntime.InvokeVoidAsync("updateChess", solution.board);
            heuristic = solution.board.heuristic;
            temp = Math.Round(solution.temp);
            this.StateHasChanged();
        }

        running = false;
        this.StateHasChanged();
    }
}
